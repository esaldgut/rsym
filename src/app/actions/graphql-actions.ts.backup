'use server';

import { generateServerClientUsingCookies } from '@aws-amplify/adapter-nextjs/data';
import { cookies } from 'next/headers';
import outputs from '../../../amplify/outputs.json';
import { cookiesClient } from '../../lib/amplify-server-utils';
import {
  GET_ALL_MARKETPLACE_FEED,
  GET_ALL_ACTIVE_CIRCUITS,
  GET_ALL_ACTIVE_PACKAGES,
  GET_ALL_ACTIVE_MOMENTS,
  CREATE_MOMENT,
  TOGGLE_LIKE,
} from '../../lib/graphql-queries';
import type {
  MarketplaceFeed,
  Circuit,
  Package,
  Moment,
  CreateMomentInput,
  LikePayload,
} from '../../types/graphql';

// Funci√≥n para crear cliente Data server-side
function getServerDataClient() {
  return generateServerClientUsingCookies({
    config: outputs,
    cookies,
  });
}

// Server action para obtener marketplace feed
export async function getMarketplaceFeedAction() {
  try {
    const client = getServerDataClient();
    const { data, errors } = await client.graphql({
      query: GET_ALL_MARKETPLACE_FEED,
    });

    if (errors) {
      console.error('GraphQL errors:', errors);
      throw new Error(errors[0].message);
    }

    return {
      success: true,
      data: data.getAllMarketplaceFeed as MarketplaceFeed[],
    };
  } catch (error) {
    console.error('Error fetching marketplace feed:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

// Server action para obtener circuitos activos
export async function getActiveCircuitsAction() {
  try {
    const { data, errors } = await cookiesClient.graphql({
      query: GET_ALL_ACTIVE_CIRCUITS,
    });

    if (errors) {
      console.error('GraphQL errors:', errors);
      throw new Error(errors[0].message);
    }

    return {
      success: true,
      data: data.getAllActiveCircuits as Circuit[],
    };
  } catch (error) {
    console.error('Error fetching circuits:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

// Server action para obtener paquetes activos
export async function getActivePackagesAction() {
  try {
    const { data, errors } = await cookiesClient.graphql({
      query: GET_ALL_ACTIVE_PACKAGES,
    });

    if (errors) {
      console.error('GraphQL errors:', errors);
      throw new Error(errors[0].message);
    }

    return {
      success: true,
      data: data.getAllActivePackages as Package[],
    };
  } catch (error) {
    console.error('Error fetching packages:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

// Server action para obtener momentos activos
export async function getActiveMomentsAction() {
  try {
    const { data, errors } = await cookiesClient.graphql({
      query: GET_ALL_ACTIVE_MOMENTS,
    });

    if (errors) {
      console.error('GraphQL errors:', errors);
      throw new Error(errors[0].message);
    }

    return {
      success: true,
      data: data.getAllActiveMoments as Moment[],
    };
  } catch (error) {
    console.error('Error fetching moments:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

// Server action para crear momento
export async function createMomentAction(input: CreateMomentInput) {
  try {
    const { data, errors } = await cookiesClient.graphql({
      query: CREATE_MOMENT,
      variables: { input },
    });

    if (errors) {
      console.error('GraphQL errors:', errors);
      throw new Error(errors[0].message);
    }

    return {
      success: true,
      data: data.createMoment as Moment,
    };
  } catch (error) {
    console.error('Error creating moment:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

// Server action para toggle like
export async function toggleLikeAction(itemId: string, itemType: string) {
  try {
    const { data, errors } = await cookiesClient.graphql({
      query: TOGGLE_LIKE,
      variables: { item_id: itemId, item_type: itemType },
    });

    if (errors) {
      console.error('GraphQL errors:', errors);
      throw new Error(errors[0].message);
    }

    return {
      success: true,
      data: data.toggleLike as LikePayload,
    };
  } catch (error) {
    console.error('Error toggling like:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}
