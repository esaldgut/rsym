import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import {
  getMarketplaceFeedAction,
  getActiveCircuitsAction,
  getActivePackagesAction,
  getActiveMomentsAction,
  createMomentAction,
  toggleLikeAction,
} from '../app/actions/graphql-actions';
import type {
  MarketplaceFeed,
  Circuit,
  Package,
  Moment,
  CreateMomentInput,
  LikePayload,
} from '../types/graphql';

// Hook para obtener el feed del marketplace usando server actions
export function useMarketplaceFeed() {
  return useQuery({
    queryKey: ['marketplace', 'feed'],
    queryFn: async () => {
      const result = await getMarketplaceFeedAction();
      if (!result.success) {
        throw new Error(result.error);
      }
      return result.data;
    },
  });
}

// Hook para obtener todos los circuitos activos
export function useActiveCircuits() {
  return useQuery({
    queryKey: ['circuits', 'active'],
    queryFn: async () => {
      const result = await getActiveCircuitsAction();
      if (!result.success) {
        throw new Error(result.error);
      }
      return result.data;
    },
  });
}

// Hook para obtener todos los packages activos
export function useActivePackages() {
  return useQuery({
    queryKey: ['packages', 'active'],
    queryFn: async () => {
      const result = await getActivePackagesAction();
      if (!result.success) {
        throw new Error(result.error);
      }
      return result.data;
    },
  });
}

// Hook para obtener todos los moments activos
export function useActiveMoments() {
  return useQuery({
    queryKey: ['moments', 'active'],
    queryFn: async () => {
      const result = await getActiveMomentsAction();
      if (!result.success) {
        throw new Error(result.error);
      }
      return result.data;
    },
  });
}

// Hook para crear un moment usando server actions
export function useCreateMoment() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (input: CreateMomentInput) => {
      const result = await createMomentAction(input);
      if (!result.success) {
        throw new Error(result.error);
      }
      return result.data;
    },
    onSuccess: () => {
      console.log('Moment creado exitosamente');
      queryClient.invalidateQueries({ queryKey: ['moments', 'active'] });
    },
    onError: (error) => {
      console.error('Error creando moment:', error);
    },
  });
}

// Hook para toggle like/unlike usando server actions
export function useToggleLike() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ item_id, item_type }: { item_id: string; item_type: string }) => {
      const result = await toggleLikeAction(item_id, item_type);
      if (!result.success) {
        throw new Error(result.error);
      }
      return result.data;
    },
    onSuccess: (data) => {
      console.log('Like actualizado:', data);
      // Invalidar múltiples queries que podrían verse afectadas
      queryClient.invalidateQueries({ queryKey: ['moments', 'active'] });
      queryClient.invalidateQueries({ queryKey: ['marketplace', 'feed'] });
    },
    onError: (error) => {
      console.error('Error actualizando like:', error);
    },
  });
}
